package biz.schroeders.mite;

import biz.schroeders.mite.model.VirtualProject;
import io.reactivex.Completable;
import io.reactivex.Observable;
import io.reactivex.Single;
import io.vertx.core.json.JsonArray;
import io.vertx.reactivex.ext.jdbc.JDBCClient;
import io.vertx.reactivex.ext.sql.SQLRowStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;


public class VirtualProjectsStore {
    private static final Logger LOGGER = LoggerFactory.getLogger(VirtualProjectsStore.class);
    private static final String CREATE_V_PROJECTS_TABLE = "CREATE TABLE IF NOT EXISTS vprojects ("
            + "id INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 1, INCREMENT BY 1) PRIMARY KEY, "
            + "name VARCHAR(255) NOT NULL "
            + ")";
    private static final String CREATE_MAPPING_TABLE = "CREATE TABLE IF NOT EXISTS project_to_vproject ("
            + "p_id INTEGER NOT NULL PRIMARY KEY, "
            + "v_id INTEGER NOT NULL, "
            + "sort_value INTEGER GENERATED BY DEFAULT AS IDENTITY(START WITH 0, INCREMENT BY 100)"
            + ")";


    private static final String CREATE_V_PROJECT = "INSERT INTO vprojects (name) VALUES (?)";
    private static final String SELECT_ONE_V_PROJECT = "SELECT name FROM vprojects WHERE id = ? LIMIT 1";
    private static final String SELECT_ALL_V_PROJECT = "SELECT id,name FROM vprojects";
    private static final String DELETE_V_PROJECT = "DELETE FROM vprojects WHERE v_id = ? LIMIT 1";
    private static final String DELETE_V_MAPPING = "DELETE FROM project_to_vproject WHERE v_id = ?";
    private static final String SELECT_MAPPING = "SELECT v_id FROM project_to_vproject WHERE p_id = ? LIMIT 1";
    private static final String DELETE_MAPPING = "DELETE FROM project_to_vproject WHERE v_id = ? AND p_id = ? LIMIT 1";
    private static final String UPDATE_MAPPING = "MERGE INTO project_to_vproject AS p2v "
            + "USING (VALUES (?,?)) AS t(p_id,v_id) "
            + "ON p2v.p_id = t.p_id "
            + "WHEN MATCHED THEN UPDATE SET p2v.v_id = t.v_id "
            + "WHEN NOT MATCHED THEN INSERT (p_id,v_id,sort_value) VALUES t.p_id, t.v_id, DEFAULT";

    private static final JsonArray DEFAULT_PROJECT_ID = new JsonArray().add(0);
    private static final JsonArray DEFAULT_VPROJECT_NAME = new JsonArray().add("not assigned to any vProject");

    private final JDBCClient jdbcClient;

    public VirtualProjectsStore(final JDBCClient jdbcClient) {
        this.jdbcClient = jdbcClient;

        jdbcClient.rxGetConnection()
                .flatMapCompletable(sqlConnection -> sqlConnection.rxExecute(CREATE_V_PROJECTS_TABLE))
                .subscribe();
        jdbcClient.rxGetConnection()
                .flatMapCompletable(sqlConnection -> sqlConnection.rxExecute(CREATE_MAPPING_TABLE))
                .subscribe();
    }

    public Single<Integer> getBoundTo(final Integer projectId) {
        LOGGER.debug("getBoundTo({})", projectId);
        return jdbcClient.rxQuerySingleWithParams(SELECT_MAPPING, new JsonArray().add(projectId))
                .toSingle(DEFAULT_PROJECT_ID).map(res -> res.getInteger(0));
    }

    public Single<VirtualProject.Builder> getVprojectBuilder(final Integer id) {
        LOGGER.debug("getVprojectBuilder({})", id);
        return jdbcClient.rxQuerySingleWithParams(SELECT_ONE_V_PROJECT, new JsonArray().add(id))
                .toSingle(DEFAULT_VPROJECT_NAME).map(res -> VirtualProject.newBuilder(id, res.getString(0)));
    }

    public Completable createVirtualProject(final String name) {
        LOGGER.debug("createVirtualProject({})", name);
        return jdbcClient.rxUpdateWithParams(CREATE_V_PROJECT, new JsonArray().add(name)).ignoreElement();
    }

    public Observable<VirtualProject> getAllVirtualProjects() {
        LOGGER.debug("getAllVirtualProjects()");
        return jdbcClient.rxQueryStream(SELECT_ALL_V_PROJECT).flatMapObservable(SQLRowStream::toObservable)
                .map(array -> VirtualProject.newBuilder(array.getInteger(0), array.getString(1)).build());
    }

    public Completable deleteVirtualProject(final Integer vId) {
        LOGGER.debug("deleteVirtualProject({})", vId);
        final JsonArray array = new JsonArray().add(vId);
        return jdbcClient.rxUpdateWithParams(DELETE_V_PROJECT, array)
                .flatMapCompletable(ignore -> jdbcClient.rxUpdateWithParams(DELETE_V_MAPPING, array)
                        .ignoreElement());
    }

    public Completable createMapping(final Integer vId, final Integer pId) {
        LOGGER.debug("createMapping({},{})", vId, pId);
        return jdbcClient.rxUpdateWithParams(UPDATE_MAPPING, new JsonArray().add(pId).add(vId)).ignoreElement();
    }

    public Completable deleteMapping(final Integer vId, final Integer pId) {
        LOGGER.debug("deleteMapping({},{})", vId, pId);
        return jdbcClient.rxUpdateWithParams(DELETE_MAPPING, new JsonArray().add(vId).add(pId)).ignoreElement();
    }
}
